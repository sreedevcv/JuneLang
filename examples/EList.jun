// Extended list


class Elist [
    init() [
        self.list = {};
    ]

    push(ele) [
        push_back(self.list, ele);
    ]

    push_list(list) [
        for (var ele: list) [
            push_back(self.list, ele);
        ]
    ]

    get(index) [
        return self.list[index];
    ]

    set(index, ele) [
        self.list[index] = ele;
    ]

    size() [
        return len(self.list);
    ]

    contains(ele) [
        for (var item: self.list) [
            if (ele == item) [
                return true;
            ]
        ]
        return false;
    ]

    pop() [
        pop_back(self.list);
    ]

    remove(ele) [
        for (var i = 0; i < len(self.list); i += 1) [
            if (self.list[i] == ele) [
                for (var j = i + 1; j < len(self.list); j += 1) [
                    self.list[j - 1] = self.list[j];
                ]
                self.pop();
                return;
            ]
        ]
    ]

    map(callback) [
        var new_list = Elist();

        for (var item: self.list) [
            new_list.push(callback(item));
        ]

        return new_list;
    ]

    filter(callback) [
        var new_list = Elist();

        for (var item: self.list) [
            if (callback(item)) [
                new_list.push(item);
            ]
        ]

        return new_list;
    ]
]

var l1 = {1, 2, 3};
var l2 = {5, 6, 7, 8};
var elist = Elist();

elist.push_list(l1);
elist.push(4);
elist.push_list(l2);
elist.pop();

print elist.list;

//print "Contains 4 " + str(elist.contains(4));
//print "Contains -10 " + str(elist.contains(-10));

//print "Removing 4";
//elist.remove(4);
//print elist.list;


fun double(item) [
    return item * 2;
]

fun is_even(item) [
    return item % 2 == 0;
]

fun add_one(item) [
    return item + 1;
]

var mapped_list = elist.map(add_one).filter(is_even).map(double);
print mapped_list.list;