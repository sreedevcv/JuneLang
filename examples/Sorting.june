extern "puts" as puts(s: [char]);
extern "printf" as _printNum(fmt: [char], num: int);

fun printNum(num: int) [
    _printNum("%d ", num);
]

fun printList(list: [int], size: int) [
    for (var i = 0; i < size; i += 1) [
        printNum(list[i]);
    ]
    puts("");
]

fun is_sorted(list: [int], size: int): bool [
    for (var i = 0; i < size - 1; i += 1) [
        if (list[i] > list[i + 1]) [
            return false;
        ]
    ]

    return true;
]

fun swap(list: [int], i: int, j: int) [
    var temp = list[i];
    list[i] = list[j];
    list[j] = temp;
]

fun partition(list: [int], start: int, end: int): int [
    var pivot = list[end];
    var limit = start - 1;

    printNum(limit);
    printNum(pivot);
    puts("partition");

    for (var i = start; i <= end - 1; i += 1) [
        if (list[i] <= pivot) [
            limit += 1;
            swap(list, i, limit);
        ]
    ]

    swap(list, limit + 1, end);

    return limit + 1;
]

fun __quickSortImpl(list: [int], start: int, end: int) [
    if (start < end) [
        var pivot = partition(list, start, end);

        printNum(start);
        printNum(end);
        printNum(pivot);
        puts("__quickSortImpl");

        __quickSortImpl(list, start, pivot - 1);
        __quickSortImpl(list, pivot + 1, end);
    ]
]

fun quickSort(list: [int], size: int) [
    __quickSortImpl(list, 0, size - 1);
]

var list = {5, 1, 7, 3, 9, 0, 3, 4, 2, 8, 6};

quickSort(list, 10);

var min = list[0];
var max = list[9];

// var sorted = is_sorted(list, 10);